var greenhorn =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: Pipe, Application, Patch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pipe\", function() { return Pipe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Application\", function() { return Application; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Patch\", function() { return Patch; });\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar decoder = new TextDecoder();\n\nfunction loadCss(css) {\n  var s = document.createElement(\"style\");\n  s.innerHTML = css;\n  document.getElementsByTagName(\"head\")[0].appendChild(s);\n}\n\nfunction serializeModifierState(evt) {\n  return {\n    \"alt_key\": evt.altKey,\n    \"ctrl_key\": evt.ctrlKey,\n    \"meta_key\": evt.metaKey,\n    \"shift_key\": evt.shiftKey\n  };\n}\n\nfunction serializePoint(x, y) {\n  return {\n    \"x\": x,\n    \"y\": y\n  };\n}\n\nfunction serializeMouseEvent(id, name, evt) {\n  return {\n    \"target\": {\n      \"id\": id\n    },\n    \"event_name\": name,\n    \"modifier_state\": serializeModifierState(evt),\n    \"button\": evt.button,\n    \"buttons\": evt.buttons,\n    \"client\": serializePoint(evt.clientX, evt.clientY),\n    \"offset\": serializePoint(evt.offsetX, evt.offsetY),\n    \"page\": serializePoint(evt.pageX, evt.pageY),\n    \"screen\": serializePoint(evt.screenX, evt.screenY)\n  };\n}\n\nfunction serializeEvent(id, name, evt) {\n  if (evt instanceof WheelEvent) {\n    var wheel = {\n      \"delta_x\": evt.deltaX,\n      \"delta_y\": evt.deltaY,\n      \"delta_z\": evt.deltaZ,\n      \"delta_mode\": evt.deltaMode\n    };\n    return {\n      \"Wheel\": _objectSpread({}, wheel, {}, serializeMouseEvent(id, name, evt))\n    };\n  } else if (evt instanceof MouseEvent) {\n    return {\n      \"Mouse\": serializeMouseEvent(id, name, evt)\n    };\n  } else if (evt instanceof KeyboardEvent) {\n    return {\n      \"Keyboard\": {\n        \"target\": {\n          \"id\": id\n        },\n        \"event_name\": name,\n        \"modifier_state\": serializeModifierState(evt),\n        \"code\": evt.code,\n        \"key\": evt.key,\n        \"location\": evt.location,\n        \"repeat\": evt.repeat,\n        \"bubble\": true\n      }\n    };\n  } else if (evt instanceof FocusEvent) {\n    return {\n      \"Focus\": [{\n        \"id\": id\n      }, name]\n    };\n  } else {\n    return {\n      \"Base\": [{\n        \"id\": id\n      }, name]\n    };\n  }\n}\n\nfunction deserializeEvent(event) {\n  if (event.hasOwnProperty(\"Keyboard\")) {\n    var evt = event.Keyboard;\n    var ret = new KeyboardEvent(evt.event_name, {\n      \"code\": evt.code,\n      \"ctrlKey\": evt.modifier_state.ctrl_key,\n      \"key\": evt.key,\n      \"location\": evt.location,\n      \"altKey\": evt.modifier_state.alt_key,\n      \"repeat\": evt.repeat,\n      \"shiftKey\": evt.shift_key,\n      \"metaKey\": evt.meta_key\n    });\n    Object.defineProperty(ret, \"__dispatch__\", {\n      value: true\n    });\n    Object.defineProperty(ret, \"__id__\", {\n      value: evt.target.id\n    });\n    return ret;\n  } else if (event.hasOwnProperty(\"Mouse\")) {// TODO: \n  } else if (event.hasOwnProperty(\"Wheel\")) {// TODO: \n  } else if (event.hasOwnProperty(\"Focus\")) {// TODO: \n  } else if (event.hasOwnProperty(\"Base\")) {// TODO: \n  }\n}\n\nfunction addEvent(app, id, elem, evt) {\n  // TODO: also support once\n  // TODO: also support useCapture\n  elem.addEventListener(evt.name, function (e) {\n    if (e.hasOwnProperty(\"__dispatch__\")) {\n      return;\n    }\n\n    if (evt.prevent_default) {\n      e.preventDefault();\n    }\n\n    if (evt.no_propagate) {\n      e.stopPropagation();\n    }\n\n    app.sendEvent(id, evt.name, e);\n  }, {\n    'passive': !evt.prevent_default\n  });\n}\n\nvar Element =\n/*#__PURE__*/\nfunction () {\n  function Element(id, tag) {\n    var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    var namespace = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    _classCallCheck(this, Element);\n\n    this.id = id;\n    this.tag = tag;\n    this.attrs = attrs;\n    this.events = events;\n    this.children = children;\n    this.namespace = namespace;\n  }\n\n  _createClass(Element, [{\n    key: \"create\",\n    value: function create(app) {\n      if (this.namespace !== null) {\n        var elem = document.createElementNS(this.namespace, this.tag);\n      } else {\n        var elem = document.createElement(this.tag);\n      }\n\n      var id = this.id;\n\n      if (id !== null) {\n        elem.setAttribute(\"__id__\", id);\n      }\n\n      for (var k = 0; k < this.attrs.length; ++k) {\n        var attr = this.attrs[k];\n        elem.setAttribute(attr[0], attr[1]);\n      }\n\n      for (var k = 0; k < this.events.length; ++k) {\n        var evt = this.events[k];\n        addEvent(app, id, elem, evt);\n      }\n\n      for (var k = 0; k < this.children.length; ++k) {\n        var child = this.children[k].create(app);\n        elem.appendChild(child);\n      }\n\n      return elem;\n    }\n  }]);\n\n  return Element;\n}();\n\nvar Text =\n/*#__PURE__*/\nfunction () {\n  function Text(text) {\n    _classCallCheck(this, Text);\n\n    this.text = text;\n  }\n\n  _createClass(Text, [{\n    key: \"create\",\n    value: function create(app) {\n      return document.createTextNode(this.text);\n    }\n  }]);\n\n  return Text;\n}();\n\nvar EventHandler = function EventHandler(name, no_propagate, prevent_default) {\n  _classCallCheck(this, EventHandler);\n\n  this.name = name;\n  this.no_propagate = no_propagate;\n  this.prevent_default = prevent_default;\n};\n\nvar Context =\n/*#__PURE__*/\nfunction () {\n  function Context(id, app) {\n    _classCallCheck(this, Context);\n\n    this.app = app;\n    this.id = id;\n  }\n\n  _createClass(Context, [{\n    key: \"send\",\n    value: function send(data) {\n      this.app.pipe.sendServiceMsg(this.id, data);\n    }\n  }]);\n\n  return Context;\n}();\n\nvar Pipe =\n/*#__PURE__*/\nfunction () {\n  function Pipe(url) {\n    _classCallCheck(this, Pipe);\n\n    this.url = url;\n    this.setupSocket();\n\n    this.onPatch = function (patch_data) {};\n\n    this.onServiceMsg = function (id, service_msg) {};\n\n    this.onRunJsMsg = function (id, run_js_msg) {};\n  }\n\n  _createClass(Pipe, [{\n    key: \"setupSocket\",\n    value: function setupSocket() {\n      var self = this;\n      this.connected = false;\n      this.socket = new WebSocket(this.url);\n      this.socket.binaryType = \"arraybuffer\";\n\n      this.socket.onopen = function (e) {\n        self.connected = true;\n      };\n\n      this.socket.onerror = function (e) {\n        self.retryConnect();\n      };\n\n      this.socket.onclose = function (e) {\n        self.retryConnect();\n      };\n\n      this.socket.onmessage = function (e) {\n        self.onMessage(e);\n      };\n    }\n  }, {\n    key: \"retryConnect\",\n    value: function retryConnect() {\n      var self = this;\n\n      if (this.socket == null) {\n        return;\n      }\n\n      this.connected = false;\n      this.socket = null;\n      setTimeout(function () {\n        self.setupSocket();\n      }, 30);\n    }\n  }, {\n    key: \"sendApplied\",\n    value: function sendApplied() {\n      if (this.socket == null || !this.connected) {\n        return;\n      }\n\n      var reply = JSON.stringify({\n        \"FrameApplied\": []\n      });\n      this.socket.send(reply);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      // conclusion on performance testing:\n      // JSON.parse is much faster then msgpack.decode()\n      // json serialization on server is approx 2x slower\n      // however, since serialization may be run in parallel\n      // on server but must be run on a single thread here\n      // we are better off just using json\n      // in case we get binary data it must be a Patch\n      if (event.data instanceof ArrayBuffer) {\n        var data = new Uint8Array(event.data);\n        this.onPatch(data.buffer);\n        this.sendApplied();\n        return;\n      } // in case we get text data in can be any type of message\n\n\n      var msg = JSON.parse(event.data);\n\n      if (msg.hasOwnProperty(\"Patch\")) {\n        var _data = new Uint8Array(msg.Patch);\n\n        this.onPatch(_data.buffer);\n        this.sendApplied();\n      } else if (msg.hasOwnProperty(\"Service\")) {\n        var service_msg = msg.Service;\n        var id = service_msg[0];\n\n        if (service_msg[1].hasOwnProperty(\"Frontend\")) {\n          var frontend_msg = service_msg[1].Frontend;\n          this.onServiceMsg(id, frontend_msg);\n        } else if (service_msg[1].hasOwnProperty(\"RunJs\")) {\n          var run_js_msg = service_msg[1].RunJs;\n          this.onRunJsMsg(id, run_js_msg);\n        } else if (service_msg[1].hasOwnProperty(\"LoadCss\")) {\n          loadCss(service_msg[1].LoadCss);\n        }\n      } else if (msg.hasOwnProperty(\"LoadCss\")) {\n        loadCss(msg.LoadCss);\n      } else if (msg.hasOwnProperty(\"RunJs\")) {\n        (function () {\n          eval(msg.RunJs);\n        })();\n      } else if (msg.hasOwnProperty(\"Propagate\")) {\n        var _event = msg.Propagate.event;\n        var prop = msg.Propagate.propagate;\n        var default_action = msg.Propagate.default_action;\n        this.injectEvent(_event, prop, default_action);\n      } else if (msg.hasOwnProperty(\"Dialog\")) {\n        console.log(msg.Dialog);\n        this.spawnDialog(msg.Dialog);\n      }\n    }\n  }, {\n    key: \"spawnDialog\",\n    value: function spawnDialog(dialog) {\n      var json_dialog = JSON.stringify(dialog);\n      console.log(json_dialog);\n      external.invoke(json_dialog);\n    }\n  }, {\n    key: \"injectEvent\",\n    value: function injectEvent(event, prop, default_action) {\n      // TODO: use prop, default_action\n      var evt = deserializeEvent(event);\n      var query = \"[__id__=\\\"\" + evt.__id__ + \"\\\"]\";\n      var elem = document.querySelector(query);\n      elem.dispatchEvent(evt);\n    }\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(id, name, evt) {\n      if (this.socket == null || !this.connected) {\n        return;\n      }\n\n      var serialized = serializeEvent(id, name, evt);\n      var msg = {\n        \"Event\": serialized\n      };\n      var data = JSON.stringify(msg);\n      this.socket.send(data);\n    }\n  }, {\n    key: \"sendServiceMsg\",\n    value: function sendServiceMsg(id, data) {\n      if (this.socket == null || !this.connected) {\n        return;\n      }\n\n      var msg = {\n        \"Service\": [id, {\n          \"Frontend\": data\n        }]\n      };\n      var serialized = JSON.stringify(msg);\n      this.socket.send(serialized);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.socket.close();\n      this.socket = null;\n      this.connected = false;\n    }\n  }]);\n\n  return Pipe;\n}();\nvar Application =\n/*#__PURE__*/\nfunction () {\n  function Application(url, root_element) {\n    _classCallCheck(this, Application);\n\n    this.pipe = new Pipe(url);\n    var self = this;\n    this.root_element = root_element;\n\n    if (!this.root_element.firstElementChild) {\n      var elem = document.createElement(\"div\");\n      root_element.appendChild(elem);\n    }\n\n    this.pipe.onPatch = function (e) {\n      self.onPatch(e);\n    };\n\n    this.pipe.onRunJsMsg = function (id, js) {\n      self.onRunJsMsg(id, js);\n    };\n\n    this.afterRender = [];\n    this.blobs = {};\n  }\n\n  _createClass(Application, [{\n    key: \"getBlob\",\n    value: function getBlob(blob_id) {\n      return this.blobs[blob_id];\n    }\n  }, {\n    key: \"registerAfterRender\",\n    value: function registerAfterRender(fun) {\n      this.afterRender.push(fun);\n    }\n  }, {\n    key: \"onRunJsMsg\",\n    value: function onRunJsMsg(id, js) {\n      var ctx = new Context(id, this);\n      eval(js);\n    }\n  }, {\n    key: \"onPatch\",\n    value: function onPatch(patch_data) {\n      var patch = new Patch(patch_data, this.root_element.firstElementChild, this);\n      var self = this;\n      window.requestAnimationFrame(function () {\n        patch.apply();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = self.afterRender[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var cb = _step.value;\n            cb(self);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.pipe.close();\n    }\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(id, name, evt) {\n      this.pipe.sendEvent(id, name, evt);\n    }\n  }]);\n\n  return Application;\n}();\nvar Patch =\n/*#__PURE__*/\nfunction () {\n  function Patch(patch, element, app) {\n    _classCallCheck(this, Patch);\n\n    this.buffer = patch;\n    this.patch = new DataView(patch);\n    this.offset = 0;\n    this.element = element;\n    this.app = app;\n    this.patch_funs = {\n      1: Patch.prototype.appendSibling,\n      3: Patch.prototype.replace,\n      4: Patch.prototype.changeText,\n      5: Patch.prototype.ascend,\n      6: Patch.prototype.descend,\n      7: Patch.prototype.removeChildren,\n      8: Patch.prototype.truncateSiblings,\n      9: Patch.prototype.nextNode,\n      10: Patch.prototype.removeAttribute,\n      11: Patch.prototype.addAttribute,\n      12: Patch.prototype.replaceAttribute,\n      13: Patch.prototype.addBlob,\n      14: Patch.prototype.removeBlob,\n      15: Patch.prototype.removeJsEvent,\n      16: Patch.prototype.addJsEvent,\n      17: Patch.prototype.replaceJsEvent,\n      18: Patch.prototype.addChildren\n    };\n  }\n\n  _createClass(Patch, [{\n    key: \"popU8\",\n    value: function popU8() {\n      var ret = this.patch.getUint8(this.offset);\n      this.offset += 1;\n      return ret;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      while (this.offset < this.patch.byteLength) {\n        var x = this.popU8();\n        var fun = this.patch_funs[x];\n        fun.call(this);\n      }\n    }\n  }, {\n    key: \"deserializeNode\",\n    value: function deserializeNode() {\n      var x = this.popU8();\n\n      if (x === 0) {\n        return this.deserializeElement();\n      } else if (x === 1) {\n        return this.deserializeText();\n      }\n    }\n  }, {\n    key: \"appendSibling\",\n    value: function appendSibling() {\n      var node = this.deserializeNode();\n      var new_elem = node.create(this.app);\n      this.element.parentNode.appendChild(new_elem);\n      this.element = new_elem;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace() {\n      var node = this.deserializeNode();\n      var new_elem = node.create(this.app);\n      this.element.parentNode.replaceChild(new_elem, this.element);\n      this.element = new_elem;\n    }\n  }, {\n    key: \"changeText\",\n    value: function changeText() {\n      var text = this.deserializeText();\n      this.element.nodeValue = text.text;\n    }\n  }, {\n    key: \"ascend\",\n    value: function ascend() {\n      this.element = this.element.parentNode;\n    }\n  }, {\n    key: \"descend\",\n    value: function descend() {\n      this.element = this.element.firstChild;\n    }\n  }, {\n    key: \"removeChildren\",\n    value: function removeChildren() {\n      while (this.element.firstChild) {\n        this.element.removeChild(this.element.firstChild);\n      }\n    }\n  }, {\n    key: \"truncateSiblings\",\n    value: function truncateSiblings() {\n      var next = this.element.nextSibling;\n\n      while (next != null) {\n        var to_remove = next;\n        next = next.nextSibling;\n        this.element.parentNode.removeChild(to_remove);\n      }\n    }\n  }, {\n    key: \"nextNode\",\n    value: function nextNode() {\n      var len = this.patch.getUint32(this.offset, true);\n      this.offset += 4;\n\n      for (var k = 0; k < len; ++k) {\n        this.element = this.element.nextSibling;\n      }\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute() {\n      var attr = this.deserializeString();\n      this.element.removeAttribute(attr);\n    }\n  }, {\n    key: \"addAttribute\",\n    value: function addAttribute() {\n      var key = this.deserializeString();\n      var value = this.deserializeString();\n      this.element.setAttribute(key, value);\n    }\n  }, {\n    key: \"replaceAttribute\",\n    value: function replaceAttribute() {\n      var key = this.deserializeString();\n      var value = this.deserializeString();\n      this.element.setAttribute(key, value);\n    }\n  }, {\n    key: \"removeJsEvent\",\n    value: function removeJsEvent() {\n      var attr = this.deserializeString();\n      var attr_key = '__' + attr;\n      var attr_value = this.element[attr_key];\n      this.element.removeEventListener(attr_value);\n      this.element[attr_key] = undefined;\n    }\n  }, {\n    key: \"addJsEvent\",\n    value: function addJsEvent() {\n      var key = this.deserializeString();\n      var value = this.deserializeString();\n      var app = this.app;\n\n      var fun = function () {\n        eval(value);\n      }();\n\n      this.element['__' + key] = fun;\n      this.element.addEventListener(key, fun);\n    }\n  }, {\n    key: \"replaceJsEvent\",\n    value: function replaceJsEvent() {\n      var key = this.deserializeString();\n      var value = this.deserializeString();\n      var app = this.app;\n\n      var fun = function () {\n        eval(value);\n      }();\n\n      var key_attr = '__' + key;\n      var attr_value = this.element[key_attr];\n      this.element.removeEventListener(attr_value);\n      this.element[key_attr] = fun;\n      this.element.addEventListener(key, fun);\n    }\n  }, {\n    key: \"addChildren\",\n    value: function addChildren() {\n      var len = this.patch.getUint32(this.offset, true);\n      this.offset += 4;\n\n      for (var k = 0; k < len; ++k) {\n        var node = this.deserializeNode();\n        this.element.appendChild(node.create());\n      }\n    }\n  }, {\n    key: \"deserializeElement\",\n    value: function deserializeElement() {\n      var id = this.deserializeId();\n      var tag = this.deserializeString();\n      var attr_len = this.patch.getUint32(this.offset, true);\n      this.offset += 4;\n      var attrs = [];\n\n      for (var k = 0; k < attr_len; ++k) {\n        var key = this.deserializeString();\n        var value = this.deserializeString();\n        attrs.push([key, value]);\n      }\n\n      var events_len = this.patch.getUint32(this.offset, true);\n      this.offset += 4;\n      var events = [];\n\n      for (var k = 0; k < events_len; ++k) {\n        var event = this.deserializeEventHandler();\n        events.push(event);\n      }\n\n      var children_len = this.patch.getUint32(this.offset, true);\n      this.offset += 4;\n      var children = [];\n\n      for (var k = 0; k < children_len; ++k) {\n        children.push(this.deserializeNode());\n      }\n\n      var self = this;\n      var hasNamespace = this.popU8() > 0;\n\n      if (hasNamespace) {\n        var namespace = this.deserializeString();\n      } else {\n        var namespace = null;\n      }\n\n      return new Element(id, tag, attrs, events, children, namespace);\n    }\n  }, {\n    key: \"deserializeText\",\n    value: function deserializeText() {\n      var text = this.deserializeString();\n      return new Text(text);\n    }\n  }, {\n    key: \"deserializeOption\",\n    value: function deserializeOption(deserializer) {\n      var available = this.popU8() > 0;\n\n      if (available) {\n        return deserializer();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"deserializeId\",\n    value: function deserializeId() {\n      var available = this.popU8() > 0;\n\n      if (!available) {\n        return null;\n      }\n\n      var lo = this.patch.getUint32(this.offset, true);\n      var hi = this.patch.getUint32(this.offset + 4, true);\n      this.offset += 8;\n      return lo + Math.pow(2, 32) * hi;\n    }\n  }, {\n    key: \"deserializeU64\",\n    value: function deserializeU64() {\n      var lo = this.patch.getUint32(this.offset, true);\n      var hi = this.patch.getUint32(this.offset + 4, true);\n      this.offset += 8;\n      return lo + Math.pow(2, 32) * hi;\n    }\n  }, {\n    key: \"deserializeString\",\n    value: function deserializeString() {\n      var len = this.patch.getUint32(this.offset, true);\n      var view = new Uint8Array(this.buffer, this.offset + 4, len);\n      this.offset += len + 4;\n      return decoder.decode(view);\n    }\n  }, {\n    key: \"deserializeEventHandler\",\n    value: function deserializeEventHandler() {\n      var no_prop = this.patch.getUint8(this.offset) > 0;\n      var prevent_default = this.patch.getUint8(this.offset + 1) > 0;\n      this.offset += 2;\n      var name = this.deserializeString();\n      return new EventHandler(name, no_prop, prevent_default);\n    }\n  }, {\n    key: \"addBlob\",\n    value: function addBlob() {\n      var id = this.deserializeId();\n      var hash = this.deserializeU64();\n      var mime_type = this.deserializeString();\n      var len = this.patch.getUint32(this.offset, true);\n      var view = new Uint8Array(this.buffer, this.offset + 4, len);\n      var blob = {\n        'blob': new Blob([view], {\n          \"type\": mime_type\n        }),\n        'hash': hash\n      };\n      this.offset += len + 4;\n      this.app.blobs[id] = blob;\n    }\n  }, {\n    key: \"removeBlob\",\n    value: function removeBlob() {\n      var id = this.deserializeId();\n      delete this.app.blobs[id];\n    }\n  }]);\n\n  return Patch;\n}();\n\n//# sourceURL=webpack://greenhorn/./src/index.js?");

/***/ })

/******/ });